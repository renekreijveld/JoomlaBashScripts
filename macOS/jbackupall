#!/bin/bash

# jbackupall - Create a backup of all Joomla websites
#
# Copyright 2018 - 2024 René Kreijveld - email@renekreijveld.nl
#
# This program is free software; you may redistribute it and/or modify it.
#
# This script uses the 'jfunctions' script to extract information about a Joomla installation.
# The jfunctions script must be in the same folder as where this script is saved.
#
# Version history
# 1.0 Initial version
# 1.1 Code optimisations and use config file

# Constants
VERSION=1.1
MYPATH=$(cd "$(dirname "$0")"; pwd -P)
MYNAME=$(basename "$0")
CONFIG_FILE="$HOME/.config/jbashscripts/config"

# Check if the config file exists
if [[ -f "$CONFIG_FILE" ]]; then
    # Source the config file to load the variables
    source "$CONFIG_FILE"
else
    echo "Error: Config file not found at $CONFIG_FILE"
    exit 1
fi

# Check if jfunctions script exists
if [[ ! -f "${MYPATH}/jfunctions" ]]; then
    echo "Error: Required script 'jfunctions' not found in ${MYPATH}. Exiting."
    exit 1
fi

# Function to show messages (honoring silent mode)
showmessage() {
    if [[ "${SILENT}" == "no" ]]; then
        echo "$1"
    fi
}

# Check if jfunctions script exists
if [[ ! -f "${MYPATH}/jfunctions" ]]; then
    echo "Error: Required script 'jfunctions' not found in ${MYPATH}. Exiting."
    exit 1
fi

# Check if the backup folder for websites exists
if [ ! -d "${backupfolder_websites}" ]
then
	echo "Error: backup directory does not exist."
	echo "Configure this with the 'jscriptsconfig' script."
	exit 1
fi

# display usage information
usage() {
	echo ""
	echo "${MYNAME} version ${VERSION}, written by René Kreijveld."
	echo ""
	echo "Usage: ${MYNAME} [-d] [-z] [-s] [-h]"
	echo ""
    echo "-d Add a date-time-stamp to each backup filename."
    echo "-z Zip. Create the backups as a zip-files, otherwise tar-gzip files will be created."
	echo "-s Silent. Do not display any messages to standard output."
	echo "-h Help. Display this info."
	echo ""
	exit 0
}

checkvscode() {
    if [[ -d ".vscode" ]]; then
        showmessage ".vscode folder found, including in backup"
        VSCODE=".vscode"
    else
        VSCODE=""
    fi
}

checkgit() {
    if [[ -d ".git" ]]; then
        showmessage ".git folder found, including in backup"
        GIT=".git"
    else
        GIT=""
    fi
}

checkgitignore() {
    if [[ -f ".gitignore" ]]; then
        showmessage ".gitignore file found, including in backup"
        GITIGNORE=".gitignore"
    else
        GITIGNORE=""
    fi
}

checkhtaccess() {
    if [[ -f ".htaccess" ]]; then
        showmessage ".htaccess file found, including in backup"
        HTACCESS=".htaccess"
    else
        HTACCESS=""
    fi
}

# Process the arguments
SHOWDATE="no"
ZIPFILE="no"
SILENT="no"
while getopts "dzsh" opt; do
    case "${opt}" in
        d) SHOWDATE="yes" ;;
        z) ZIPFILE="yes" ;;
        s) SILENT="yes" ;;
        h) usage ;;
        *) usage ;;
    esac
done

# Inform the user about the process
showmessage "${MYNAME} version ${VERSION}, written by René Kreijveld."

# Scan directories for Joomla instances
find "${rootfolder}" -maxdepth 2 -type d | while read -r DIR; do
    if [[ -f "${DIR}/configuration.php" ]]; then
        # Possible Joomla found
        showmessage "Possible Joomla found at ${DIR}"
        cd ${DIR}

        source "${MYPATH}/jfunctions"

        checkvscode
        checkgit
        checkgitignore
        checkhtaccess

        # Add a timestamp if requested
        if [[ "${SHOWDATE}" == "yes" ]]; then
            NOW=$(date +".%Y%m%d-%H%M%S")
        else
            NOW=""
        fi

        # Create database dump
        showmessage "Create database dump"
        jdbdump -s

        if [[ ! -f "${database}.sql" ]]; then
            echo "Error: No database dump found. Exiting."
            continue
        fi

        showmessage "Backup website"

        if [[ "${ZIPFILE}" == "yes" ]]; then
            BACKUPFILE="${backupfolder_websites}/${sitename}${NOW}.zip"
            zip -q -r ${BACKUPFILE} ${HTACCESS} ${VSCODE} ${GIT} ${GITIGNORE} *
        else
            BACKUPFILE="${backupfolder_websites}/${sitename}${NOW}.tgz"
            tar czf ${BACKUPFILE} ${HTACCESS} ${VSCODE} ${GIT} ${GITIGNORE} *
        fi

        # Cleanup database dump
        rm -f ${database}.sql

        showmessage "Backup ready at:"
        if [[ "${SILENT}" == "no" ]]; then
            ls -l ${BACKUPFILE}
        fi

    fi
done