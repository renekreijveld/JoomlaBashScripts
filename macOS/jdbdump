#!/bin/bash

# jdbdump -- Dump a Joomla database to SQL file.
# Supports Joomla versions 1.o - 5.x
#
# Copyright 2024 René Kreijveld - email@renekreijveld.nl
#
# This program is free software; you may redistribute it and/or modify it.
#
# This script uses the 'jfunctions' script to extract information about a Joomla installation.
# The jfunctions script must be in the same folder as where this script is saved.
#
# Version history:
# 1.0 Initial version
# 1.1 Code rewrite
# 1.2 Modification of all echo -e statements
# 1.3 Added test if jfunctions exists
# 1.4 Code improvements
# 1.5 Added use of config file

# General Variables
VERSION=1.5
MYPATH=$(cd "$(dirname "$0")"; pwd -P)
MYNAME=$(basename "$0")
SILENT="no"
CONFIG_FILE="$HOME/.config/jbashscripts/config"

# Check if the config file exists
if [[ -f "${CONFIG_FILE}" ]]; then
    # Source the config file to load the variables
    source "${CONFIG_FILE}"
else
    echo "Error: Config file not found at ${CONFIG_FILE}"
    exit 1
fi

# Function to show messages (honoring silent mode)
showmessage() {
    if [[ "${SILENT}" == "no" ]]; then
        printf "$1\n"
    fi
}

# Check if jfunctions script exists
if [[ ! -f "${MYPATH}/jfunctions" ]]; then
    echo "Error: Required script 'jfunctions' not found in ${MYPATH}. Exiting."
    exit 1
else
    # Gather Joomla information
    source "${MYPATH}/jfunctions"
fi

# Display usage information
usage() {
    echo ""
    echo "${MYNAME} version ${VERSION}, written by René Kreijveld."
    echo ""
    echo "Usage: ${MYNAME} [-d] [-c] [-b] [-s] [-h]"
    echo ""
    echo "-d Add a date-time-stamp to the database dump filename."
    echo "-c Compress the database dump with gzip."
    echo "-b Save the backup to the default backup folder."
    echo "-s Silent. Display no messages."
    echo "-h Help. Display this info."
    echo ""
    exit 0
}

# Process the arguments
COMPRESS="no"
SHOWDATE="no"
USEFOLDER="no"
SILENT="no"
while getopts "dcbsh" opt; do
    case "${opt}" in
        d) SHOWDATE="yes" ;;
        c) COMPRESS="yes" ;;
        b) USEFOLDER="yes" ;;
        s) SILENT="yes" ;;
        h) usage ;;
        *) usage ;;
    esac
done

# Add a timestamp if requested
if [[ "${SHOWDATE}" == "yes" ]]; then
    NOW=$(date +".%Y%m%d-%H%M%S")
else
    NOW=""
fi

# Inform the user about the process
showmessage "${MYNAME} version ${VERSION}, written by René Kreijveld."

# Dump the database to a .sql file
# Add a timestamp if requested
if [[ "${USEFOLDER}" == "yes" ]]; then
    DUMP_FILE="${backupfolder_databases}/${database}${NOW}.sql"
else
    DUMP_FILE="${database}${NOW}.sql"
fi

if mysqldump --skip-opt --extended-insert=FALSE --add-drop-table --add-locks --create-options --disable-keys --lock-tables --quick --set-charset --host="${host}" --user="${dbuser}" --password="${password}" "${database}" > "${DUMP_FILE}"; then
    if [[ "${COMPRESS}" == "yes" ]]; then
        gzip "${DUMP_FILE}"
        showmessage "${DUMP_FILE}.gz created (compressed with gzip)."
    else
        showmessage "${DUMP_FILE} created."
    fi
    exit 0
else
    showmessage "Error creating database dump."
    exit 1
fi